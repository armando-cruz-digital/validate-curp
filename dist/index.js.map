{"version":3,"file":"index.js","sources":["../src/getCheckDigit.js","../src/index.js","../src/validStates.js"],"sourcesContent":["const VALUES_MAP = {\n  0: 0,\n  1: 1,\n  2: 2,\n  3: 3,\n  4: 4,\n  5: 5,\n  6: 6,\n  7: 7,\n  8: 8,\n  9: 9,\n  A: 10,\n  B: 11,\n  C: 12,\n  D: 13,\n  E: 14,\n  F: 15,\n  G: 16,\n  H: 17,\n  I: 18,\n  J: 19,\n  K: 20,\n  L: 21,\n  M: 22,\n  N: 23,\n  Ñ: 24,\n  O: 25,\n  P: 26,\n  Q: 27,\n  R: 28,\n  S: 29,\n  T: 30,\n  U: 31,\n  V: 32,\n  W: 33,\n  X: 34,\n  Y: 35,\n  Z: 36,\n};\n\nconst getScore = (string) => string.split('').reduce((sum, char, i) => {\n  const index = 18 - i;\n  const value = VALUES_MAP[char] || 0;\n  return sum + value * index;\n}, 0);\n\nmodule.exports = (curp) => {\n  const base = curp.slice(0, -1);\n  const score = getScore(base);\n  const mod = score % 10;\n  if (mod === 0) return '0';\n  return String(10 - mod);\n};\n","const getCheckDigit = require('./getCheckDigit');\nconst forbiddenWords = require('./forbiddenWords.json');\nconst validStates = require('./validStates');\n\nconst CURP_REGEXP = /^[A-Z][AEIOUX][A-Z]{2}[0-9]{6}[HM][A-Z]{2}[B-DF-HJ-NP-TV-Z]{3}[A-Z\\d]\\d$/;\nconst INVALID_FORMAT_ERROR = 'INVALID_FORMAT';\nconst INVALID_DATE_ERROR = 'INVALID_DATE';\nconst INVALID_STATE_ERROR = 'INVALID_STATE';\nconst INVALID_CHECK_DIGIT_ERROR = 'INVALID_CHECK_DIGIT';\nconst FORBIDDEN_WORD_ERROR = 'FORBIDDEN_WORD';\n\nconst parseInput = (input) => String(input)\n  .trim()\n  .toUpperCase()\n  .replace(/[^0-9A-Z]/g, '');\n\nconst validateDate = (curp) => {\n  const dateStr = curp.slice(4, 10);\n  const year = dateStr.slice(0, 2);\n  const month = dateStr.slice(2, 4);\n  const day = dateStr.slice(4, 6);\n  const date = new Date(`20${year}-${month}-${day}`);\n  return !Number.isNaN(date.getTime());\n};\n\nconst validateCheckDigit = (curp) => {\n  const digit = curp.slice(-1);\n  const expected = getCheckDigit(curp);\n  return expected === digit;\n};\n\nconst validateState = (curp) => {\n  const state = (curp || '').slice(11, 13);\n  return validStates.includes(state);\n};\n\nconst hasForbiddenWords = (curp) => {\n  const prefix = (curp || '').slice(0, 4);\n  return forbiddenWords.includes(prefix);\n};\n\nconst validate = (curp) => {\n  const errors = [];\n  const hasValidFormat = CURP_REGEXP.test(curp);\n  const hasValidDate = hasValidFormat ? validateDate(curp) : true;\n  const hasValidState = hasValidFormat ? validateState(curp) : true;\n  const hasValidDigit = hasValidFormat ? validateCheckDigit(curp) : true;\n  if (!hasValidFormat) errors.push(INVALID_FORMAT_ERROR);\n  if (!hasValidDate) errors.push(INVALID_DATE_ERROR);\n  if (!hasValidState) errors.push(INVALID_STATE_ERROR);\n  if (!hasValidDigit) errors.push(INVALID_CHECK_DIGIT_ERROR);\n  if (hasForbiddenWords(curp)) errors.push(FORBIDDEN_WORD_ERROR);\n  return errors;\n};\n\nconst getValidResponse = (curp) => ({\n  isValid: true,\n  curp,\n});\n\nconst getInvalidResponse = (errors) => ({\n  isValid: false,\n  curp: null,\n  errors,\n});\n\nmodule.exports = (input) => {\n  const curp = parseInput(input);\n  const errors = validate(curp);\n  const isValid = errors.length === 0;\n\n  return isValid ? getValidResponse(curp) : getInvalidResponse(errors);\n};\n","module.exports = [\n  'AS', // AGUASCALIENTES\n  'BC', // BAJA CALIFORNIA\n  'BS', // BAJA CALIFORNIA SUR\n  'CC', // CAMPECHE\n  'CL', // COAHUILA\n  'CM', // COLIMA\n  'CS', // CHIAPAS\n  'CH', // CHIHUAHUA\n  'DF', // DISTRITO FEDERAL\n  'DG', // DURANGO\n  'GT', // GUANAJUATO\n  'GR', // GUERRERO\n  'HG', // HIDALGO\n  'JC', // JALISCO\n  'MC', // MÉXICO\n  'MN', // MICHOACÁN\n  'MS', // MORELOS\n  'NT', // NAYARIT\n  'NL', // NUEVO LE”N\n  'OC', // OAXACA\n  'PL', // PUEBLA\n  'QT', // QUERÉTARO\n  'QR', // QUINTANA ROO\n  'SP', // SAN LUIS POTOSÍ\n  'SL', // SINALOA\n  'SR', // SONORA\n  'TC', // TABASCO\n  'TS', // TAMAULIPAS\n  'TL', // TLAXCALA\n  'VZ', // VERACRUZ\n  'YN', // YUCATÁN\n  'ZS', // ZACATECAS\n  'NE', // NACIDO EN EL EXTRANJERO\n];\n"],"names":["VALUES_MAP","A","B","C","D","E","F","G","H","I","J","K","L","M","N","Ñ","O","P","Q","R","S","T","U","V","W","X","Y","Z","getCheckDigit","curp","base","slice","mod","split","reduce","sum","char","i","String","forbiddenWords","validStates","CURP_REGEXP","validate","errors","hasValidFormat","test","hasValidDate","dateStr","year","month","day","date","Date","concat","Number","isNaN","getTime","validateDate","hasValidState","state","includes","validateState","hasValidDigit","digit","validateCheckDigit","push","prefix","hasForbiddenWords","input","trim","toUpperCase","replace","parseInput","length","isValid","getValidResponse","getInvalidResponse"],"mappings":"6OAAA,IAAMA,EAAa,CACjB,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,IAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,ICrCCC,ED8CW,SAACC,GAChB,IAAMC,EAAOD,EAAKE,MAAM,GAAI,GAEtBC,EADiBF,EARWG,MAAM,IAAIC,QAAO,SAACC,EAAKC,EAAMC,GAG/D,OAAOF,GADOnC,EAAWoC,IAAS,IADpB,GAAKC,KAGlB,GAKmB,GACpB,OAAY,IAARL,EAAkB,IACfM,OAAO,GAAKN,IClDfO,2jBACAC,ECFW,CACf,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MD7BIC,EAAc,2EAqCdC,EAAW,SAACb,GAChB,IAAMc,EAAS,GACTC,EAAiBH,EAAYI,KAAKhB,GAClCiB,GAAeF,GA5BF,SAACf,GACpB,IAAMkB,EAAUlB,EAAKE,MAAM,EAAG,IACxBiB,EAAOD,EAAQhB,MAAM,EAAG,GACxBkB,EAAQF,EAAQhB,MAAM,EAAG,GACzBmB,EAAMH,EAAQhB,MAAM,EAAG,GACvBoB,EAAO,IAAIC,KAAJ,KAAAC,OAAcL,EAAQC,KAAAA,OAAAA,EAASC,KAAAA,OAAAA,IAC5C,OAAQI,OAAOC,MAAMJ,EAAKK,WAsBYC,CAAa5B,GAC7C6B,GAAgBd,GAdF,SAACf,GACrB,IAAM8B,GAAS9B,GAAQ,IAAIE,MAAM,GAAI,IACrC,OAAOS,EAAYoB,SAASD,GAYWE,CAAchC,GAC/CiC,GAAgBlB,GArBG,SAACf,GAC1B,IAAMkC,EAAQlC,EAAKE,OAAO,GAE1B,OADiBH,EAAcC,KACXkC,EAkBmBC,CAAmBnC,GAM1D,OALKe,GAAgBD,EAAOsB,KA1CD,kBA2CtBnB,GAAcH,EAAOsB,KA1CD,gBA2CpBP,GAAef,EAAOsB,KA1CD,iBA2CrBH,GAAenB,EAAOsB,KA1CK,uBA4BR,SAACpC,GACzB,IAAMqC,GAAUrC,GAAQ,IAAIE,MAAM,EAAG,GACrC,OAAOQ,EAAeqB,SAASM,GAa3BC,CAAkBtC,IAAOc,EAAOsB,KA1CT,kBA2CpBtB,UAcQ,SAACyB,GAChB,IAAMvC,EAxDW,SAACuC,GAAD,OAAW9B,OAAO8B,GAClCC,OACAC,cACAC,QAAQ,aAAc,IAqDVC,CAAWJ,GAClBzB,EAASD,EAASb,GAGxB,OAFkC,IAAlBc,EAAO8B,OAdA,SAAC5C,GAAD,MAAW,CAClC6C,SAAS,EACT7C,KAAAA,GAciB8C,CAAiB9C,GAXT,SAACc,GAAD,MAAa,CACtC+B,SAAS,EACT7C,KAAM,KACNc,OAAAA,GAQ0CiC,CAAmBjC"}